auto mallocHooked_call = (void*(__cdecl*)(size_t))0x5EB023;
void* __cdecl mallocHooked(size_t a1) {
	return mallocHooked_call(a1);

	if (a1 <= 0 || a1 >= 0x7FFFFFFF) return nullptr;
	if (auto data = mallocHooked_call(a1)) {
		memset(data, 0, a1);
		return data;
	}
	return nullptr;
}

void HookMalloc() {
	uintptr_t mallocAddresses[] = {
		0x40245F,
		0x40247F,
		0x4025D1,
		0x4025F1,
		0x40279A,
		0x4027B6,
		0x40C458,
		0x40C644,
		0x40C69E,
		0x40C6B1,
		0x40C6CD,
		0x40C6FF,
		0x40CAD5,
		0x40CD0A,
		0x410CD7,
		0x412049,
		0x41CB7E,
		0x41DE7B,
		0x41DEC9,
		0x41E2CE,
		0x41E308,
		0x41E33A,
		0x41E359,
		0x4206D3,
		0x420D64,
		0x420D80,
		0x4214C3,
		0x421733,
		0x422483,
		0x422F49,
		0x4230E5,
		0x423913,
		0x4243CA,
		0x42442A,
		0x425A7B,
		0x425BAF,
		0x425C39,
		0x425D90,
		0x426446,
		0x42668D,
		0x42F472,
		0x42FC39,
		0x42FC6B,
		0x433B53,
		0x433C02,
		0x438678,
		0x438D96,
		0x439721,
		0x43A779,
		0x43A92C,
		0x43BD95,
		0x43BDBE,
		0x43BDE5,
		0x43BE0C,
		0x43BE33,
		0x43C553,
		0x43CFB4,
		0x43E9A0,
		0x43E9D4,
		0x43EBA7,
		0x43ECDC,
		0x43EDB3,
		0x43EDE0,
		0x43F4B7,
		0x43F76C,
		0x43F9B7,
		0x43FD2C,
		0x43FEE0,
		0x44007B,
		0x4479F2,
		0x447AC5,
		0x44B3C7,
		0x44F9AA,
		0x44FA23,
		0x44FB84,
		0x451C0E,
		0x451CB8,
		0x451FE5,
		0x4523E4,
		0x45438E,
		0x4543CF,
		0x45440B,
		0x454447,
		0x4545E6,
		0x454660,
		0x454819,
		0x454835,
		0x457749,
		0x4577DE,
		0x457875,
		0x458368,
		0x4584B4,
		0x458568,
		0x458612,
		0x4586BC,
		0x458FB5,
		0x459652,
		0x45972C,
		0x45FDB2,
		0x45FDDC,
		0x460F92,
		0x46118D,
		0x4619B7,
		0x461A52,
		0x461A9B,
		0x4621A9,
		0x464E57,
		0x46534E,
		0x465377,
		0x465396,
		0x4653B5,
		0x465589,
		0x4658D0,
		0x4658E4,
		0x4682BC,
		0x468718,
		0x4692D0,
		0x469449,
		0x469B3F,
		0x469B56,
		0x46DA5F,
		0x4710BF,
		0x4710D6,
		0x473ABD,
		0x473ACA,
		0x473B32,
		0x473B42,
		0x476473,
		0x477D26,
		0x477D45,
		0x4791AF,
		0x47A3AE,
		0x47A41F,
		0x47A6D9,
		0x47A77B,
		0x47A9D5,
		0x47AD47,
		0x47BC1D,
		0x47BF8A,
		0x47C0C8,
		0x4803EF,
		0x4803FF,
		0x4848EF,
		0x4848FF,
		0x4849DC,
		0x4849EC,
		0x484A3C,
		0x484A4C,
		0x484A9C,
		0x484AAC,
		0x484AF9,
		0x484B09,
		0x484B59,
		0x484B69,
		0x484BB9,
		0x484BC9,
		0x484C19,
		0x484C29,
		0x486E9F,
		0x486ED6,
		0x487030,
		0x487225,
		0x48731E,
		0x4873CA,
		0x48932C,
		0x48988C,
		0x48999A,
		0x48B371,
		0x48C325,
		0x48EDDA,
		0x48EE9A,
		0x48F414,
		0x48F732,
		0x490069,
		0x49266E,
		0x492695,
		0x4935AF,
		0x4935E2,
		0x49402C,
		0x494043,
		0x4967D7,
		0x49754D,
		0x49A5F5,
		0x49BADA,
		0x49E0C5,
		0x49F6CA,
		0x49F78A,
		0x49FB8B,
		0x49FC5A,
		0x4A5DBC,
		0x4A5DEC,
		0x4A6747,
		0x4A6CF8,
		0x4A71A6,
		0x4A71C2,
		0x4A7217,
		0x4A74D3,
		0x4A75C7,
		0x4A7637,
		0x4A76F7,
		0x4A77A4,
		0x4A77F7,
		0x4A7854,
		0x4A78A4,
		0x4B44DE,
		0x4B4515,
		0x4B458B,
		0x4B8EBF,
		0x4B9CBB,
		0x4BAB73,
		0x4BBA54,
		0x4BBB00,
		0x4BBB2B,
		0x4BC289,
		0x4BC62D,
		0x4BC776,
		0x4BC811,
		0x4BCAF3,
		0x4BCB5A,
		0x4BE574,
		0x4BE5F6,
		0x4BE6C0,
		0x4BEBAF,
		0x4BEEA9,
		0x4BF00C,
		0x4BF040,
		0x4BF0AC,
		0x4BF13D,
		0x4BF278,
		0x4BF477,
		0x4BF7A6,
		0x4BF91F,
		0x4C0270,
		0x4C057F,
		0x4C0F27,
		0x4C0FB3,
		0x4C1C4D,
		0x4C1DB3,
		0x4C36B0,
		0x4C3A83,
		0x4C3B0B,
		0x4C3D18,
		0x4C3FD3,
		0x4C4312,
		0x4C69A1,
		0x4C9654,
		0x4C969E,
		0x4C96BA,
		0x4C9A57,
		0x4CE64A,
		0x4CE7C4,
		0x4CFCF0,
		0x4D096A,
		0x4D09AC,
		0x4D1688,
		0x4D16C0,
		0x4D1A1D,
		0x4D1A8E,
		0x4D3911,
		0x4D3F63,
		0x4D3F8A,
		0x4D47DB,
		0x4D68A2,
		0x4D7A27,
		0x4D86A1,
		0x4D87A1,
		0x4D8B84,
		0x4D8C1B,
		0x4D98E6,
		0x4DCC7A,
		0x4DD1DD,
		0x4DD1FB,
		0x4DD219,
		0x4DD237,
		0x4DD6D6,
		0x4DD6FD,
		0x4DD74F,
		0x4DD79B,
		0x4DDA96,
		0x4DE57D,
		0x4DE89B,
		0x4DE8C3,
		0x4DF3C5,
		0x4DF4BC,
		0x4E1AEA,
		0x4E240A,
		0x4E249B,
		0x4E2510,
		0x4E257F,
		0x4E5B53,
		0x4E5BC2,
		0x4E6112,
		0x4E6BFA,
		0x4E7A9A,
		0x4E82CA,
		0x4E876A,
		0x4E9EDA,
		0x4EA6CA,
		0x4EABBA,
		0x4EAFD6,
		0x4EB91A,
		0x4EBF9A,
		0x4EC69A,
		0x4ED6DA,
		0x4EDE2A,
		0x4EE75A,
		0x4EEE65,
		0x4F05DE,
		0x4F064E,
		0x4F068E,
		0x4F06E6,
		0x4F1381,
		0x4F13B8,
		0x4F13F6,
		0x4F1447,
		0x4F17BB,
		0x4F18AC,
		0x4F1B21,
		0x4F1C43,
		0x4F1DBC,
		0x4F1E40,
		0x4F2181,
		0x4F22E6,
		0x4F242F,
		0x4F24B5,
		0x4F382B,
		0x4F7187,
		0x4F721E,
		0x4F729D,
		0x4F7314,
		0x4F7370,
		0x4F73F7,
		0x4F749B,
		0x4F754B,
		0x4F7597,
		0x4F75C5,
		0x4F7638,
		0x4F7B5C,
		0x4F7C79,
		0x4F80C6,
		0x4F81F2,
		0x4F84B7,
		0x4F95ED,
		0x4F9625,
		0x4F9709,
		0x4F9FA3,
		0x4F9FBC,
		0x4F9FD1,
		0x4FA0B2,
		0x4FA2FC,
		0x4FA5BA,
		0x4FA6C2,
		0x4FA6F4,
		0x4FEE97,
		0x4FF791,
		0x4FF98A,
		0x504CCB,
		0x504D17,
		0x506123,
		0x506F6B,
		0x507D96,
		0x507E00,
		0x507E66,
		0x507EC4,
		0x50821B,
		0x508261,
		0x5082CA,
		0x50869F,
		0x5087D3,
		0x508831,
		0x50888F,
		0x5088EA,
		0x508923,
		0x50A3DD,
		0x50AF64,
		0x50AFB8,
		0x50B08E,
		0x50B0E5,
		0x50B352,
		0x50B434,
		0x50B48E,
		0x50B67B,
		0x50B6D1,
		0x50B8DA,
		0x50B92B,
		0x50BA9C,
		0x50BAF0,
		0x50BC6F,
		0x50BCC2,
		0x50CC8D,
		0x5221BB,
		0x58B236,
		0x58B28E,
		0x5CC5EC,
		0x5E6691,
		0x5E67D9,
		0x5E6821,
		0x5E72A9,
		0x5E8689,
		0x5E973A,
		0x5E9D32,
		0x5E9FA6,
		0x5EA3F6,
		0x5EB04D,
		0x5EC2D2,
		0x5EC3A0,
		0x5EC4CC,
		0x5EC5C9,
		0x5EC5DA,
		0x5EC5E8,
		0x5EC86D,
		0x5ED4A7,
		0x5ED530,
		0x5ED759,
		0x5EDE5C,
		0x5EEA8A,
		0x5EF253,
		0x5EF941,
		0x5EFED5,
		0x5F1A32,
		0x5F1A62,
		0x5F1C8C,
		0x5F1D58,
		0x5F1DC0,
		0x5F1DF5,
		0x5F1E8B,
		0x5F2A4A,
		0x5F2C30,
		0x5F2D84,
		0x5F3430,
		0x5F45FE,
		0x5F462C,
		0x5F4874,
		0x5F489F,
		0x5F623F,
		0x5F62D2,
		0x5F66F8,
		0x5F67F4,
		0x5F6D9F,
		0x5F6DCA,
		0x5FA517,
		0x5FB58D,
		0x5FB66C,
		0x5FB730,
		0x5FB74B,
		0x5FB80E,
		0x5FBA8A,
		0x5FBBEB,
		0x5FBD13,
		0x603710,
		0x62ACC2,
		0x62B8B5,
		0x62EF25,
		0x62EF65,
		0x62F285,
		0x62F315,
		0x62F332,
		0x62F415,
		0x62F4E5,
		0x62F555,
		0x62F5C5,
		0x62F7B5,
		0x62F835,
		0x62F8B5,
		0x62F905,

		// j_malloc
		/*0x4CAAB1,
		0x521BF1,
		0x521C36,
		0x521DC3,
		0x521FE9,
		0x5272C9,
		0x5273E4,
		0x5276A1,
		0x5276A9,
		0x527773,
		0x528112,
		0x5282B0,
		0x528547,
		0x528A68,
		0x528C2B,
		0x528C3B,
		0x52922D,
		0x529669,
		0x52A9AD,
		0x52AA9F,
		0x52AAE6,
		0x52AC41,
		0x52AC85,
		0x52AF80,
		0x52AFC9,
		0x52AFFE,
		0x52B257,
		0x52B2A2,
		0x52B2EA,
		0x52B5CD,
		0x52B744,
		0x52B783,
		0x52BB00,
		0x52BB40,
		0x52C223,
		0x52C264,
		0x52C32E,
		0x52C886,
		0x52C8C7,
		0x52C985,
		0x52E7CF,
		0x52E849,
		0x52E8A8,
		0x537102,
		0x5374C7,
		0x53753D,
		0x5378E8,
		0x537CAE,
		0x537CCE,
		0x537CEE,
		0x537D0E,
		0x537D2E,
		0x537D4E,
		0x537D6E,
		0x537D8E,
		0x537DAE,
		0x537DCE,
		0x537DEE,
		0x537E0E,
		0x537E2E,
		0x537E4E,
		0x537E6E,
		0x537E8E,
		0x537EAE,
		0x537ECE,
		0x537EEE,
		0x537F0E,
		0x537F60,
		0x537F80,
		0x537FA0,
		0x537FC0,
		0x537FE0,
		0x538016,
		0x538036,
		0x538056,
		0x538076,
		0x538096,
		0x5380D9,
		0x5380F9,
		0x538119,
		0x538139,
		0x538159,
		0x53818B,
		0x5381AB,
		0x5381CB,
		0x5381EB,
		0x53820B,
		0x538269,
		0x538289,
		0x5382A9,
		0x5382C9,
		0x5382E9,
		0x538309,
		0x538349,
		0x538362,
		0x53837B,
		0x538394,
		0x53DC77,
		0x53DDE8,
		0x53EC2D,
		0x53ECFF,
		0x53ED70,
		0x53EDA6,
		0x53EF04,
		0x53EF57,
		0x53F03F,
		0x5407B0,
		0x540B0B,
		0x540CA5,
		0x541160,
		0x5411AB,
		0x5415E0,
		0x542AF3,
		0x542DB1,
		0x542DF6,
		0x542E46,
		0x542EB6,
		0x543913,
		0x543F13,
		0x543F57,
		0x544018,
		0x544044,
		0x544E7A,
		0x544EBD,
		0x544F7A,
		0x5463B2,
		0x5468A4,
		0x546C47,
		0x5480D9,
		0x548468,
		0x5484E9,
		0x548818,
		0x548938,
		0x548A02,
		0x54A866,
		0x54A88B,
		0x54A8AF,
		0x54A8D3,
		0x54A8F7,
		0x54AA48,
		0x54ABFA,
		0x54ACEF,
		0x54AF34,
		0x54AF58,
		0x54AF7C,
		0x54B308,
		0x54B32C,
		0x54B350,
		0x54B59B,
		0x54B5BE,
		0x54B5E1,
		0x54B604,
		0x54B8D0,
		0x54B8EA,
		0x54CF2B,
		0x54F5BC,
		0x551711,
		0x55173E,
		0x552EF4,
		0x55715E,
		0x557DF6,
		0x557FE1,
		0x558146,
		0x558841,
		0x558A32,
		0x558ABE,
		0x55AF27,
		0x55AFB5,
		0x55C8D9,
		0x55CA88,
		0x55D4C9,
		0x55D729,
		0x55E37D,
		0x561711,
		0x56206F,
		0x5622E3,
		0x562302,
		0x562315,
		0x562460,
		0x562480,
		0x5625AA,
		0x56284B,
		0x56289F,
		0x5628F3,
		0x562950,
		0x562982,
		0x5629F9,
		0x562A2B,
		0x562AA2,
		0x562AD4,
		0x562B46,
		0x562B6C,
		0x562BD8,
		0x562C08,
		0x562C8A,
		0x562CB0,
		0x562D1D,
		0x562D4D,
		0x562DD4,
		0x562E05,
		0x562E8D,
		0x562EB4,
		0x562F1D,
		0x562F52,
		0x562FE5,
		0x563017,
		0x5630A2,
		0x563118,
		0x5631B6,
		0x5631DD,
		0x563269,
		0x563290,
		0x56331C,
		0x563343,
		0x5633D3,
		0x563403,
		0x563473,
		0x563935,
		0x563E8B,
		0x563FD2,
		0x5648A5,
		0x564DFE,
		0x564F45,
		0x566EF2,
		0x5677A2,
		0x5677BE,
		0x5677CF,
		0x567927,
		0x56797E,
		0x5679E6,
		0x567A4E,
		0x567C6B,
		0x567E6D,
		0x567EDB,
		0x567FFC,
		0x5680D5,
		0x5680E5,
		0x568BA3,
		0x568D61,
		0x568E5E,
		0x56BE46,
		0x56BF1D,
		0x56C049,
		0x56C09A,
		0x56C0ED,
		0x56C13D,
		0x56C22C,
		0x56C2B8,
		0x56CDF3,
		0x56D545,
		0x56D59C,
		0x56D67E,
		0x571A8A,
		0x5739FF,
		0x573A5D,
		0x575A24,
		0x5760D8,
		0x576785,
		0x576D79,
		0x5772D4,
		0x577A1D,
		0x577AFC,
		0x577C21,
		0x577DEB,
		0x577F04,
		0x5780B2,
		0x5781AC,
		0x5782F1,
		0x578402,
		0x578FAA,
		0x578FC2,
		0x578FDA,
		0x579514,
		0x5798A1,
		0x5798B9,
		0x5798D1,
		0x5798EC,
		0x579900,
		0x579FA6,
		0x57A6A3,
		0x57A6B7,
		0x57A6CF,
		0x57A6E1,
		0x57A6F5,
		0x57A709,
		0x57ADB3,
		0x57CBC0,
		0x57DD82,
		0x57F49E,
		0x57F4B0,
		0x581B08,
		0x5820A6,
		0x5820BE,
		0x5824B5,
		0x5824C7,
		0x5825AC,
		0x582AE2,
		0x583BBA,
		0x58446C,
		0x58461A,
		0x58475E,
		0x584789,
		0x5847D3,
		0x5847F4,
		0x58481F,
		0x5848D3,
		0x585C61,
		0x586565,
		0x5865FD,
		0x58683B,
		0x586858,
		0x586B5A,
		0x586B7E,
		0x5884F1,
		0x5888DE,
		0x588980,
		0x590708,
		0x590772,
		0x590901,
		0x59094E,
		0x5909F1,
		0x590ACE,
		0x590B17,
		0x590BE7,
		0x5920E4,
		0x59219F,
		0x592302,
		0x592398,
		0x5924A8,
		0x592666,
		0x5926A6,
		0x5926E0,
		0x592DD3,
		0x596A6D,
		0x597C9B,
		0x5983AD,
		0x59C52D,
		0x59D291,
		0x59D2A9,
		0x59D364,
		0x59D37C,
		0x59D394,
		0x59EA75,
		0x59EA8D,
		0x59EAA5,
		0x59EABD,
		0x59EAD5,
		0x59EAED,
		0x59EB05,
		0x59EB1D,
		0x59EB35,
		0x59EB4D,
		0x59EB65,
		0x59EB7D,
		0x59EB95,
		0x59EDFA,
		0x59EF7A,
		0x59F08A,
		0x59F09E,
		0x59F7AC,
		0x5A0891,
		0x5A0F2F,
		0x5A205B,
		0x5A207C,
		0x5A2FF4,
		0x5A36FE,
		0x5A444E,
		0x5A4555,
		0x5A4B02,
		0x5A5DC8,
		0x5AB74C,
		0x5AB813,
		0x5AB824,
		0x5AB835,
		0x5AB84D,
		0x5ABB34,
		0x5ABB46,
		0x5B3012,
		0x5B3023,
		0x5B4427,
		0x5B7213,
		0x5B91F2,
		0x5B927D,
		0x5B92FB,
		0x5B9DE4,
		0x5B9E26,
		0x5BAD96,
		0x5BAF37,
		0x5BB163,
		0x5C3213,
		0x5C322B,
		0x5C49D1,
		0x5C4B58,
		0x5C54E5,
		0x5C584F,
		0x5C8883,
		0x5C8898,
		0x5C8B4E,
		0x5C8E0A,
		0x5C8F0D,
		0x5C8FEB,
		0x5C9300,
		0x5C9321,
		0x5C9355,
		0x5C951A,
		0x5C9668,
		0x5C9AAF,
		0x5C9C89,
		0x5C9CA4,
		0x5C9CBF,
		0x5C9CD3,
		0x5C9CE5,
		0x5C9FF3,
		0x5CA008,
		0x5CA12E,
		0x5CA143,
		0x5CA580,
		0x5E365A,
		0x5E3672,
		0x5E372F,
		0x5E3747,
		0x5E378F,
		0x5E37A3,
		0x5E37B7,
		0x5E37CE,
		0x5E38D8,
		0x5E38F0,
		0x5E3908,
		0x5E3920,
		0x5E3981,
		0x5E3995,
		0x5E39A9,*/
	};
	for (auto& addr : mallocAddresses) {
		NyaHookLib::PatchRelative(NyaHookLib::CALL, addr, &mallocHooked);
	}
	NyaHookLib::PatchRelative(NyaHookLib::JMP, 0x4D8690, &mallocHooked);
}